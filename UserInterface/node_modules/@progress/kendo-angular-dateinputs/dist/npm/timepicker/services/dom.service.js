"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var util_1 = require("../../util");
var div = util_1.domContainerFactory('div');
var ul = util_1.domContainerFactory('ul');
var li = util_1.domContainerFactory('li');
var listItem = function () { return li('<span>02</span>', 'k-item'); };
var list = function () { return ul([listItem()], 'k-reset'); };
var scrollable = function () { return (div([list()], 'k-time-container k-content k-scrollable')); };
var timeList = function () {
    if (!util_1.isDocumentAvailable()) {
        return null;
    }
    var timeListWrapper = div([div([scrollable()], 'k-time-list')], 'k-time-list-wrapper');
    var timeListContainer = div([timeListWrapper], 'k-time-list-container');
    return div([timeListContainer], 'k-popup k-group k-reset k-animation-container', { left: '-1000px' });
};
var TIMELIST_ELEMENT = timeList();
/**
 * @hidden
 */
var DOMService = (function () {
    function DOMService() {
    }
    DOMService.prototype.timeListHeight = function () {
        return this.computedHeight(function (el) { return el.querySelector('.k-time-container'); });
    };
    DOMService.prototype.itemHeight = function () {
        return this.computedHeight(function (el) { return el.querySelector('li'); });
    };
    DOMService.prototype.isActive = function (element) {
        if (!util_1.isDocumentAvailable() || !element) {
            return false;
        }
        return (element.nativeElement || element) === document.activeElement;
    };
    DOMService.prototype.computedHeight = function (selector) {
        if (!util_1.isDocumentAvailable()) {
            return 0;
        }
        var rootElement = document.body.appendChild(TIMELIST_ELEMENT);
        var element = selector(rootElement.children[0]);
        var height = element.offsetHeight || parseFloat(window.getComputedStyle(element).height);
        document.body.removeChild(rootElement);
        return height;
    };
    return DOMService;
}());
DOMService.decorators = [
    { type: core_1.Injectable },
];
/** @nocollapse */
DOMService.ctorParameters = function () { return []; };
exports.DOMService = DOMService;
