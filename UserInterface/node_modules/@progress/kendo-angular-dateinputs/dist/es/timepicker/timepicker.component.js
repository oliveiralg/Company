import { Component, ChangeDetectorRef, ChangeDetectionStrategy, EventEmitter, HostBinding, HostListener, Input, Output, NgZone, ViewChild, ViewChildren, ViewContainerRef, Inject, Optional, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
import { L10N_PREFIX, LocalizationService, RTL } from '@progress/kendo-angular-l10n';
import { PopupService } from '@progress/kendo-angular-popup';
import { IntlService } from '@progress/kendo-angular-intl';
import { cloneDate } from '@progress/kendo-date-math';
import { MIDNIGHT_DATE, MIN_TIME, MAX_TIME } from '../defaults';
import { TimeListComponent } from './timelist.component';
import { DOMService } from './services/dom.service';
import { TIME_PART } from './models/time-part.default';
import { PreventableEvent } from '../preventable-event';
import { getNow, guid, noop, isInTimeRange, setTime, timeInRange } from '../util';
import { generateGetters, generateSnappers, snapTime, valueMerger } from './util';
import { timeRangeValidator } from '../validators/time-range.validator';
var INTL_DATE_FORMAT = 'https://github.com/telerik/kendo-intl/blob/master/docs/date-formatting/index.md';
var formatRegExp = new RegExp(TIME_PART.hour + "|" + TIME_PART.minute + "|" + TIME_PART.second + "|" + TIME_PART.dayperiod + "|literal");
var listReducer = function (state, list, idx, all) {
    if (state.length || !list.isActive) {
        return state;
    }
    return [{
            next: all[idx + 1] || list,
            prev: all[idx - 1] || list
        }];
};
var Direction;
(function (Direction) {
    Direction[Direction["Left"] = 0] = "Left";
    Direction[Direction["Right"] = 1] = "Right";
})(Direction || (Direction = {}));
/**
 * Represents the Kendo UI TimePicker component for Angular.
 */
var TimePickerComponent = (function () {
    function TimePickerComponent(zone, dom, localization, cdr, intl, popupService, rtl) {
        this.zone = zone;
        this.dom = dom;
        this.localization = localization;
        this.cdr = cdr;
        this.intl = intl;
        this.popupService = popupService;
        this.rtl = rtl;
        /**
         * Sets or gets the `disabled` property of the TimePicker and determines whether the component is active.
         */
        this.disabled = false;
        /**
         * Specifies the time format used to display the input value.
         */
        this.format = 't';
        /**
         * Determines whether to display the **Cancel** button in the popup.
         */
        this.cancelButton = true;
        /**
         * Determines whether to display the **Now** button in the popup.
         *
         * > If the current time is out of range or the incremental step is greater than `1`, the **Now** button will be hidden.
         */
        this.nowButton = true;
        /**
         * Sets or gets the `tabIndex` property of the TimePicker.
         */
        this.tabIndex = 0;
        /**
         * Sets the title of the input element of the TimePicker.
         */
        this.title = "";
        /**
         * Determines whether the built-in min or max validators are enforced when a form is being validated.
         */
        this.rangeValidation = true;
        /**
         * Specifies the value of the TimePicker component.
         */
        this.value = null;
        /**
         * Fires each time the user selects a new value.
         */
        this.valueChange = new EventEmitter();
        /**
         * Fires each time the user focuses the input element.
         *
         * @example
         * ```ts
         * _@Component({
         * selector: 'my-app',
         * template: `
         *  <kendo-timepicker (focus)="handleFocus()"></kendo-timepicker>
         * `
         * })
         * class AppComponent {
         *   public handleFocus(): void {
         *      console.log("Component is focused");
         *   }
         * }
         * ```
         *
         * > To wire the event programmatically, use the `onFocus` property.
         */
        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the input element gets blurred.
         *
         * @example
         * ```ts
         * _@Component({
         * selector: 'my-app',
         * template: `
         *  <kendo-timepicker (blur)="handleBlur()"></kendo-timepicker>
         * `
         * })
         * class AppComponent {
         *   public handleBlur(): void {
         *      console.log("Component is blurred");
         *   }
         * }
         * ```
         *
         * > To wire the event programmatically, use the `onBlur` property.
         */
        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the popup is about to open.
         * This event is preventable. If you cancel the event, the popup will remain closed.
         */
        this.open = new EventEmitter();
        /**
         * Fires each time the popup is about to close.
         * This event is preventable. If you cancel the event, the popup will remain open.
         */
        this.close = new EventEmitter();
        this.activeListIndex = -1;
        this.isActive = false;
        this.popupUID = guid();
        this.showNowButton = true;
        this.onChange = noop;
        this.onTouched = noop;
        this.timeRangeValidateFn = noop;
        this.resolvedPromise = Promise.resolve(null);
        this._min = cloneDate(MIN_TIME);
        this._max = cloneDate(MAX_TIME);
        this._popupSettings = { animate: true };
        this._show = false;
        this._steps = {};
    }
    Object.defineProperty(TimePickerComponent.prototype, "min", {
        get: function () {
            return this._min;
        },
        /**
         * Specifies the smallest valid time value.
         */
        set: function (min) {
            this._min = cloneDate(min || MIN_TIME);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerComponent.prototype, "max", {
        get: function () {
            return this._max;
        },
        /**
         * Specifies the biggest valid time value.
         */
        set: function (max) {
            this._max = cloneDate(max || MAX_TIME);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerComponent.prototype, "steps", {
        get: function () {
            return this._steps;
        },
        /**
         * Configures the incremental steps of the TimePicker.
         *
         * The available options are:
         * - `hour: Number`&mdash;Controls the incremental step of the hour value.
         * - `minute: Number`&mdash;Controls the incremental step of the minute value.
         * - `second: Number`&mdash;Controls the incremental step of the second value.
         *
         * @example
         * ```ts
         * _@Component({
         * selector: 'my-app',
         * template: `
         *  <kendo-timepicker format="HH:mm:ss" [steps]="steps"></kendo-timepicker>
         * `
         * })
         * class AppComponent {
         *   public steps = { hour: 2, minute: 15, second: 15 };
         * }
         * ```
         *
         * > If the incremental step is greater than `1`, the **Now** button will be hidden.
         */
        set: function (steps) {
            this._steps = steps || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerComponent.prototype, "popupSettings", {
        get: function () {
            return this._popupSettings;
        },
        /**
         * Configures the popup of the TimePicker.
         *
         * The available options are:
         * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
         * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.
         */
        set: function (settings) {
            this._popupSettings = Object.assign({}, { animate: true }, settings);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerComponent.prototype, "current", {
        get: function () {
            return this._current;
        },
        set: function (value) {
            this._current = timeInRange(this.snapTime(cloneDate(value || MIDNIGHT_DATE)), this.min, this.max);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerComponent.prototype, "show", {
        get: function () {
            return this._show;
        },
        set: function (show) {
            var event = new PreventableEvent();
            if (!this._show && show) {
                this.open.emit(event);
            }
            else if (this._show && !show) {
                this.close.emit(event);
            }
            if (event.isDefaultPrevented()) {
                return;
            }
            this._toggle(show);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    TimePickerComponent.prototype.wrapperClasses = function () {
        return true;
    };
    /**
     * @hidden
     */
    TimePickerComponent.prototype.handleKeydown = function (event) {
        var altKey = event.altKey, keyCode = event.keyCode;
        if (keyCode === 27) {
            this.show = false;
            return;
        }
        if (keyCode === 13 && !this.hasActiveButton()) {
            this.handleAccept();
            return;
        }
        if (keyCode === 37 || keyCode === 39) {
            this.focusList(keyCode === 37 ? Direction.Left : Direction.Right);
            return;
        }
        if (altKey) {
            if (keyCode === 38) {
                this.show = false;
            }
            if (keyCode === 40) {
                this.show = true;
            }
        }
    };
    /**
     * @hidden
     */
    TimePickerComponent.prototype.ngOnInit = function () {
        this.init();
        this.keydownHandler = this.handleKeydown.bind(this);
        this.mousedownHandler = function (e) { return e.preventDefault(); };
    };
    /**
     * @hidden
     */
    TimePickerComponent.prototype.ngOnChanges = function (changes) {
        this.init();
        this.verifyFormat();
        if (changes.min || changes.max) {
            this.timeRangeValidateFn = this.rangeValidation ? timeRangeValidator(this.min, this.max) : noop;
        }
    };
    /**
     * @hidden
     */
    TimePickerComponent.prototype.ngOnDestroy = function () {
        this.show = false;
    };
    /**
     * @hidden
     */
    TimePickerComponent.prototype.writeValue = function (value) {
        this.current = cloneDate(value);
        this.value = cloneDate(value);
        this.cdr.markForCheck();
    };
    /**
     * @hidden
     */
    TimePickerComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    /**
     * @hidden
     */
    TimePickerComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    /**
     * @hidden
     */
    TimePickerComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @hidden
     */
    TimePickerComponent.prototype.validate = function (control) {
        return this.timeRangeValidateFn(control);
    };
    /**
     * Focuses the TimePicker component.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="timepicker.focus()">Focus time picker</button>
     *  <kendo-timepicker #timepicker></kendo-timepicker>
     * `
     * })
     * class AppComponent { }
     * ```
     */
    TimePickerComponent.prototype.focus = function () {
        this.input.focus();
    };
    /**
     * Blurs the TimePicker component.
     */
    TimePickerComponent.prototype.blur = function () {
        (this.timeLists.first || this.input)['blur'](); //tslint:disable-line:no-string-literal
    };
    /**
     * Toggles the visibility of the popup. If you use the `toggle` method to show or hide the popup,
     * the `open` and `close` events do not fire.
     *
     * @param show - The state of the popup.
     */
    TimePickerComponent.prototype.toggle = function (show) {
        var _this = this;
        if (this.disabled) {
            return;
        }
        this.resolvedPromise.then(function () {
            _this._toggle((show === undefined) ? !_this.show : show);
        });
    };
    Object.defineProperty(TimePickerComponent.prototype, "isOpen", {
        /**
         * Returns the current open state of the popup.
         */
        get: function () {
            return this.show;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerComponent.prototype, "appendTo", {
        /**
         * @hidden
         */
        get: function () {
            var appendTo = this.popupSettings.appendTo;
            if (!appendTo || appendTo === 'root') {
                return undefined;
            }
            return appendTo === 'component' ? this.container : appendTo;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    TimePickerComponent.prototype.handleChange = function (value) {
        this.value = cloneDate(value);
        this.current = value;
        this.input.focus();
        this.show = false;
        this.onChange(cloneDate(value));
        this.valueChange.emit(cloneDate(value));
    };
    /**
     * @hidden
     */
    TimePickerComponent.prototype.handleAccept = function () {
        var value = cloneDate(this.value || MIDNIGHT_DATE);
        this.handleChange(this.mergeValue(value, this.current));
        this.show = false;
    };
    /**
     * @hidden
     */
    TimePickerComponent.prototype.handleNow = function () {
        this.handleChange(getNow());
        this.cdr.markForCheck();
    };
    /**
     * @hidden
     */
    TimePickerComponent.prototype.handleFocus = function () {
        var _this = this;
        if (this.isActive) {
            return;
        }
        this.isActive = true;
        this.nextTick(function () {
            if (!_this.hasActiveComponent()) {
                return;
            }
            _this.onFocus.emit();
        });
    };
    /**
     * @hidden
     */
    TimePickerComponent.prototype.handleListFocus = function (index) {
        this.activeListIndex = index;
        this.handleFocus();
    };
    /**
     * @hidden
     */
    TimePickerComponent.prototype.handleBlur = function () {
        var _this = this;
        this.activeListIndex = -1;
        this.nextTick(function () {
            if (_this.hasActiveComponent()) {
                return;
            }
            _this.isActive = false;
            _this.show = false;
            _this.cdr.markForCheck();
            _this.onTouched();
            _this.onBlur.emit();
        });
    };
    /**
     * @hidden
     */
    TimePickerComponent.prototype.handleIconClick = function () {
        this.input.focus();
        this.show = !this.show;
    };
    Object.defineProperty(TimePickerComponent.prototype, "popupClasses", {
        /**
         * @hidden
         */
        get: function () {
            return [
                'k-timepicker-container',
                'k-group',
                'k-reset'
            ].concat(this.popupSettings.popupClass || []);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    TimePickerComponent.prototype.normalizeTime = function (date) {
        return setTime(MIDNIGHT_DATE, date);
    };
    TimePickerComponent.prototype.init = function () {
        this.dateFormatParts = this.intl.splitDateFormat(this.format);
        this.mergeValue = valueMerger(generateGetters(this.dateFormatParts));
        this.snapTime = snapTime(generateSnappers(this.steps));
        this.showNowButton = !this.hasSteps() && this.nowButton && isInTimeRange(getNow(), this.min, this.max);
        this.current = this.value;
    };
    TimePickerComponent.prototype._toggle = function (show) {
        var _this = this;
        this._show = show;
        if (this.popupRef) {
            this.popupRef.popupElement.removeEventListener('keydown', this.keydownHandler);
            this.popupRef.popupElement.removeEventListener('mousedown', this.mousedownHandler);
            this.popupRef.close();
            this.popupRef = null;
        }
        if (this._show) {
            var direction = this.rtl ? 'right' : 'left';
            this.popupRef = this.popupService.open({
                anchor: this.wrapper,
                anchorAlign: { vertical: 'bottom', horizontal: direction },
                animate: this.popupSettings.animate,
                appendTo: this.appendTo,
                content: this.popupTemplate,
                popupAlign: { vertical: 'top', horizontal: direction },
                popupClass: this.popupClasses,
                positionMode: 'absolute'
            });
            this.popupRef.popupElement.setAttribute('id', this.popupUID);
            this.popupRef.popupAnchorViewportLeave.subscribe(function () { return _this.show = false; });
            this.popupRef.popupOpen.subscribe(function () {
                _this.cdr.markForCheck();
                _this.nextTick(function () {
                    if (_this.isActive && _this.timeLists.length) {
                        _this.timeLists.first.focus();
                    }
                });
            });
            this.popupRef.popupClose.subscribe(function () {
                if (_this.isActive) {
                    _this.input.focus();
                }
            });
            this.popupRef.popupElement.addEventListener('keydown', this.keydownHandler);
            this.popupRef.popupElement.addEventListener('mousedown', this.mousedownHandler);
        }
    };
    TimePickerComponent.prototype.focusList = function (dir) {
        if (!this.timeLists.length) {
            return;
        }
        this.timeLists.reduce(listReducer, [])
            .map(function (state) { return dir === Direction.Right ? state.next : state.prev; })
            .map(function (list) { return list && list.focus(); });
    };
    TimePickerComponent.prototype.hasActiveComponent = function () {
        return this.input.isActive || this.hasActiveTimeList() || this.hasActiveButton();
    };
    TimePickerComponent.prototype.hasActiveTimeList = function () {
        return this.timeLists.length && this.timeLists.reduce(function (isActive, list) { return isActive || list.isActive; }, false);
    };
    TimePickerComponent.prototype.hasActiveButton = function () {
        var _this = this;
        if (!this.accept) {
            return false;
        }
        return [this.accept, this.cancel, this.now].reduce(function (isActive, el) { return isActive || _this.dom.isActive(el); }, false);
    };
    TimePickerComponent.prototype.hasSteps = function () {
        var _this = this;
        var keys = Object.keys(this.steps);
        return keys.length !== keys.reduce(function (acc, k) { return acc + _this.steps[k]; }, 0);
    };
    TimePickerComponent.prototype.nextTick = function (f) {
        var _this = this;
        this.zone.runOutsideAngular(function () {
            // Use setTimeout instead of a resolved promise
            // because the latter does not wait long enough
            setTimeout(function () { return _this.zone.run(f); });
        });
    };
    TimePickerComponent.prototype.verifyFormat = function () {
        this.dateFormatParts.forEach(function (part) {
            if (!formatRegExp.test(part.type)) {
                throw new Error("\n                    Provided format is not supported. Supported specifiers are T|t|H|h|m|s|a. See " + INTL_DATE_FORMAT + "\n                ");
            }
        });
    };
    return TimePickerComponent;
}());
export { TimePickerComponent };
TimePickerComponent.decorators = [
    { type: Component, args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                exportAs: 'kendo-timepicker',
                providers: [
                    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return TimePickerComponent; }), multi: true },
                    { provide: NG_VALIDATORS, useExisting: forwardRef(function () { return TimePickerComponent; }), multi: true },
                    LocalizationService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.timepicker'
                    }
                ],
                selector: 'kendo-timepicker',
                template: "\n        <ng-container kendoTimePickerLocalizedMessages\n            i18n-accept=\"kendo.timepicker.accept|The Accept button text in the timepicker component\"\n            accept=\"Set\"\n\n            i18n-acceptLabel=\"kendo.timepicker.acceptLabel|The label for the Accept button in the timepicker component\"\n            acceptLabel=\"Set time\"\n\n            i18n-cancel=\"kendo.timepicker.cancel|The Cancel button text in the timepicker component\"\n            cancel=\"Cancel\"\n\n            i18n-cancelLabel=\"kendo.timepicker.cancelLabel|The label for the Cancel button in the timepicker component\"\n            cancelLabel=\"Cancel changes\"\n\n            i18n-now=\"kendo.timepicker.now|The Now button text in the timepicker component\"\n            now=\"Now\"\n\n            i18n-nowLabel=\"kendo.timepicker.nowLabel|The label for the Now button in the timepicker component\"\n            nowLabel=\"Select now\"\n\n            i18n-toggle=\"kendo.timepicker.toggle|The label for the toggle button in the timepicker component\"\n            toggle=\"Toggle time list\"\n        >\n        </ng-container>\n        <span #wrapper\n            class=\"k-picker-wrap k-state-default\"\n            [class.k-state-disabled]=\"disabled\"\n            [class.k-state-focused]=\"isActive\"\n        >\n            <kendo-dateinput\n                #input\n                [hasPopup]=\"true\"\n                [isPopupOpen]=\"show\"\n                [disabled]=\"disabled\"\n                [format]=\"format\"\n                [min]=\"normalizeTime(min)\"\n                [max]=\"normalizeTime(max)\"\n                [steps]=\"steps\"\n                [tabIndex]=\"!show ? tabIndex : -1\"\n                [title]=\"title\"\n                [value]=\"value\"\n                (valueChange)=\"handleChange($event)\"\n                (focus)=\"handleFocus()\"\n                (blur)=\"handleBlur()\"\n            ></kendo-dateinput>\n            <span class=\"k-select\"\n                role=\"button\"\n                [attr.title]=\"localization.get('toggle')\"\n                [attr.aria-label]=\"localization.get('toggle')\"\n                [attr.aria-controls]=\"popupUID\"\n                (mousedown)=\"$event.preventDefault()\"\n                (click)=\"handleIconClick()\"\n            >\n                <span class=\"k-icon k-i-clock\"></span>\n            </span>\n            <ng-template #popupTemplate>\n                <div class=\"k-time-header\">\n                    <span class=\"k-title\">\n                        {{current | kendoDate:format }}\n                    </span>\n                    <button\n                        #now\n                        *ngIf=\"showNowButton\"\n                        class=\"k-button k-bare k-time-now\"\n                        [attr.title]=\"localization.get('nowLabel')\"\n                        [attr.aria-label]=\"localization.get('nowLabel')\"\n                        (click)=\"handleNow()\"\n                        (focus)=\"handleFocus()\"\n                        (blur)=\"handleBlur()\"\n                    >{{localization.get('now')}}</button>\n                </div>\n                <div class=\"k-time-list-container\">\n                    <span class=\"k-time-highlight\"></span>\n                    <ng-template ngFor [ngForOf]=\"dateFormatParts\" let-part let-idx=\"index\">\n                        <div\n                            class=\"k-time-list-wrapper\"\n                            [class.k-state-focused]=\"idx === activeListIndex\"\n                            *ngIf=\"part.type !== 'literal'\"\n                        >\n                            <span class=\"k-title\">{{intl.dateFieldName(part)}}</span>\n                            <kendo-timelist\n                                [min]=\"min\"\n                                [max]=\"max\"\n                                [part]=\"part\"\n                                [step]=\"steps[part.type] || 1\"\n                                [(value)]=\"current\"\n                                (focus)=\"handleListFocus(idx)\"\n                                (blur)=\"handleBlur()\"\n                            ></kendo-timelist>\n                        </div>\n                        <div class=\"k-time-separator\" *ngIf=\"part.type === 'literal'\">\n                            {{part.pattern}}\n                        </div>\n                    </ng-template>\n                </div>\n                <div class=\"k-time-footer k-action-buttons\">\n                    <button\n                        #cancel\n                        *ngIf=\"cancelButton\"\n                        class=\"k-button\"\n                        [attr.title]=\"localization.get('cancelLabel')\"\n                        [attr.aria-label]=\"localization.get('cancelLabel')\"\n                        (click)=\"this.show = false\"\n                        (focus)=\"handleFocus()\"\n                        (blur)=\"handleBlur()\"\n                    >{{localization.get('cancel')}}</button>\n                    <button\n                        #accept\n                        class=\"k-time-accept k-button k-primary\"\n                        [attr.title]=\"localization.get('acceptLabel')\"\n                        [attr.aria-label]=\"localization.get('acceptLabel')\"\n                        (click)=\"handleAccept()\"\n                        (focus)=\"handleFocus()\"\n                        (blur)=\"handleBlur()\"\n                    >{{localization.get('accept')}}</button>\n                </div>\n            </ng-template>\n        </span>\n        <ng-container #container></ng-container>\n    "
            },] },
];
/** @nocollapse */
TimePickerComponent.ctorParameters = function () { return [
    { type: NgZone, },
    { type: DOMService, },
    { type: LocalizationService, },
    { type: ChangeDetectorRef, },
    { type: IntlService, },
    { type: PopupService, },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [RTL,] },] },
]; };
TimePickerComponent.propDecorators = {
    'input': [{ type: ViewChild, args: ['input',] },],
    'popupTemplate': [{ type: ViewChild, args: ['popupTemplate',] },],
    'container': [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] },],
    'accept': [{ type: ViewChild, args: ['accept',] },],
    'cancel': [{ type: ViewChild, args: ['cancel',] },],
    'now': [{ type: ViewChild, args: ['now',] },],
    'wrapper': [{ type: ViewChild, args: ['wrapper',] },],
    'timeLists': [{ type: ViewChildren, args: [TimeListComponent,] },],
    'disabled': [{ type: Input },],
    'format': [{ type: Input },],
    'min': [{ type: Input },],
    'max': [{ type: Input },],
    'cancelButton': [{ type: Input },],
    'nowButton': [{ type: Input },],
    'steps': [{ type: Input },],
    'popupSettings': [{ type: Input },],
    'tabIndex': [{ type: Input },],
    'title': [{ type: Input },],
    'rangeValidation': [{ type: Input },],
    'value': [{ type: Input },],
    'valueChange': [{ type: Output },],
    'onFocus': [{ type: Output, args: ['focus',] },],
    'onBlur': [{ type: Output, args: ['blur',] },],
    'open': [{ type: Output },],
    'close': [{ type: Output },],
    'wrapperClasses': [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-timepicker',] }, { type: HostBinding, args: ['class.k-header',] },],
    'handleKeydown': [{ type: HostListener, args: ['keydown', ['$event'],] },],
};
