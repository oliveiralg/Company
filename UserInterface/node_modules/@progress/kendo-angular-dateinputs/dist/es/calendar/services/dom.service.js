import { Injectable } from '@angular/core';
import { domContainerFactory as containerFactory, isDocumentAvailable } from '../../util';
var div = containerFactory('div');
var ul = containerFactory('ul');
var li = containerFactory('li');
var td = containerFactory('td');
var th = containerFactory('th');
var tr = containerFactory('tr');
var tbody = containerFactory('tbody');
var thead = containerFactory('thead');
var table = containerFactory('table');
var monthHeader = function () { return (div("\n            <span class=\"k-calendar-title\">March 2017</span>\n            <span class=\"k-calendar-today\">TODAY</span>\n        ", 'k-calendar-header')); };
var monthWeekHeader = function () { return (table([
    thead([
        tr([th('MO')])
    ])
], 'k-calendar-weekdays')); };
var content = function (rows) { return (table([
    tbody([
        tr([th('1')])
    ].concat((new Array(rows).fill('1').map(function (v) { return tr([td("<span class=\"k-link\">" + v + "</span>")]); }))))
])); };
var scrollable = function (children) { return div(children, 'k-content k-scrollable'); };
var view = function (contentElement, className) { return (div([
    monthHeader(),
    monthWeekHeader(),
    scrollable([contentElement])
], className)); };
var listItem = function () { return li('<span>FEB</span>'); };
var list = function () { return ul([listItem()]); };
var navigationScrollable = function () { return scrollable([list()]); };
var navigation = function () { return div([navigationScrollable()], 'k-calendar-navigation'); };
var calendar = function (viewElement) {
    if (!isDocumentAvailable()) {
        return null;
    }
    var cal = div([navigation(), viewElement], 'k-widget k-calendar k-calendar-infinite', { left: '-10000px' });
    return div([cal], 'k-temp-calendar');
};
var factory = function (rows, className) {
    var viewElement;
    return function () {
        if (!isDocumentAvailable) {
            return null;
        }
        if (!viewElement) {
            viewElement = calendar(view(content(rows), className));
        }
        return viewElement;
    };
};
var monthView = factory(6, 'k-calendar-view k-calendar-monthview');
var yearView = factory(3, 'k-calendar-view k-calendar-yearview');
var decadeView = factory(2, 'k-calendar-view k-calendar-decadeview');
/**
 * @hidden
 */
var DOMService = (function () {
    function DOMService() {
    }
    DOMService.prototype.calendarHeight = function () {
        return this.computedHeight(function (el) { return el; }, monthView());
    };
    DOMService.prototype.scrollableContentHeight = function () {
        return this.computedHeight(function (el) { return el.querySelector('.k-calendar-view').querySelector('.k-scrollable'); }, monthView());
    };
    DOMService.prototype.scrollableYearContentHeight = function () {
        var height = this.computedHeight(function (el) { return el.querySelector('.k-calendar-view').querySelector('.k-scrollable'); }, yearView());
        return height + this.headerHeight();
    };
    DOMService.prototype.headerHeight = function () {
        return this.computedHeight(function (el) { return el.querySelector('tbody').children[0]; }, monthView());
    };
    DOMService.prototype.navigationItemHeight = function () {
        return this.computedHeight(function (el) { return el.querySelector('li'); }, monthView());
    };
    DOMService.prototype.monthViewHeight = function () {
        return this.computedHeight(function (el) { return el.querySelector('tbody'); }, monthView());
    };
    DOMService.prototype.yearViewHeight = function () {
        return this.computedHeight(function (el) { return el.querySelector('tbody'); }, yearView());
    };
    DOMService.prototype.decadeViewHeight = function () {
        return this.computedHeight(function (el) { return el.querySelector('tbody'); }, decadeView());
    };
    DOMService.prototype.computedHeight = function (selector, container) {
        if (!isDocumentAvailable()) {
            return 0;
        }
        var rootElement = document.body.appendChild(container);
        var element = selector(rootElement.children[0]);
        var height = parseFloat(window.getComputedStyle(element).height) || element.offsetHeight;
        document.body.removeChild(rootElement);
        return height;
    };
    return DOMService;
}());
export { DOMService };
DOMService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
DOMService.ctorParameters = function () { return []; };
