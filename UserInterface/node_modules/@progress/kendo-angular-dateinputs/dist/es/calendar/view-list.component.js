/* tslint:disable:component-selector-name  component-selector-type */
import { Component, ChangeDetectionStrategy, ChangeDetectorRef, EventEmitter, HostBinding, Input, Output, ViewChild } from '@angular/core';
//import { cloneDate, firstDayOfMonth } from '@progress/kendo-date-math';
import { cloneDate } from '@progress/kendo-date-math';
import { IntlService } from '@progress/kendo-angular-intl';
import { VirtualizationComponent } from '../virtualization/virtualization.component';
import { BusViewService } from './services/bus-view.service';
import { DOMService } from './services/dom.service';
import { CalendarViewEnum } from './models/view.enum';
import { MIN_DATE, MAX_DATE } from '../defaults';
import { dateInRange, hasChange, shiftWeekNames } from '../util';
var VIEWS_COUNT = 5;
var isEqualMonthYear = function (date1, date2) { return (date1 && date2 &&
    date1.getFullYear() === date2.getFullYear() &&
    date1.getMonth() === date2.getMonth()); };
/**
 * @hidden
 */
var ViewListComponent = (function () {
    function ViewListComponent(bus, cdr, intl, dom) {
        this.bus = bus;
        this.cdr = cdr;
        this.intl = intl;
        this.isActive = true;
        this.min = new Date(MIN_DATE);
        this.max = new Date(MAX_DATE);
        this.showWeekNumbers = false;
        this.valueChange = new EventEmitter();
        this.dates = [];
        this.cols = [];
        this.weekNames = [];
        this.take = VIEWS_COUNT;
        this.animateToIndex = true;
        this.indexToScroll = -1;
        this.minViewsToRender = 1;
        this.scrollableHeight = dom.scrollableContentHeight();
        this.scrollableYearHeight = dom.scrollableYearContentHeight();
        this.decadeViewHeight = dom.decadeViewHeight();
        this.monthViewHeight = dom.monthViewHeight();
        this.yearViewHeight = dom.yearViewHeight();
        this.viewOffset = -1 * dom.headerHeight();
        this.weekNames = this.getWeekNames();
    }
    Object.defineProperty(ViewListComponent.prototype, "getComponentClass", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewListComponent.prototype, "getComponentMonthClass", {
        get: function () {
            return this.activeView === CalendarViewEnum.month;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewListComponent.prototype, "getComponentYearClass", {
        get: function () {
            return this.activeView === CalendarViewEnum.year;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewListComponent.prototype, "getComponentDecadeClass", {
        get: function () {
            return this.activeView === CalendarViewEnum.decade;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewListComponent.prototype, "getComponentCenturyClass", {
        get: function () {
            return this.activeView === CalendarViewEnum.century;
        },
        enumerable: true,
        configurable: true
    });
    ViewListComponent.prototype.ngOnChanges = function (changes) {
        this.service = this.bus.service(this.activeView);
        if (!this.service) {
            return;
        }
        this.showWeekNumbers = this.isMonthView() && this.showWeekNumbers;
        this.cols = new Array(this.service.rowLength(this.showWeekNumbers)).fill('');
        if (changes.showWeekNumbers) {
            this.weekNames = this.getWeekNames();
        }
        var focusedDate = this.focusedDate;
        var activeViewChanged = hasChange(changes, 'activeView');
        var viewDate = dateInRange(this.service.viewDate(focusedDate, this.max, this.minViewsToRender), this.min, this.max);
        var total = this.service.total(this.min, this.max);
        var totalChanged = this.total && this.total !== total;
        var generateDates = totalChanged || !this.service.isInArray(focusedDate, this.dates);
        this.animateToIndex = !activeViewChanged;
        this.viewHeight = this.getViewHeight();
        this.bottomOffset = this.getScrollableHeight() - this.viewHeight;
        this.skip = this.service.skip(viewDate, this.min);
        this.total = total;
        if (generateDates) {
            this.dates = this.service.datesList(viewDate, this.getTake(this.skip));
        }
        if (!isEqualMonthYear(this.activeDate, focusedDate)) {
            this.activeDate = cloneDate(focusedDate);
        }
        var updateIndex = hasChange(changes, 'focusedDate') || activeViewChanged;
        if (generateDates || updateIndex || this.virtualization.isIndexVisible(this.skip)) {
            this.indexToScroll = this.service.skip(focusedDate, this.min);
        }
    };
    ViewListComponent.prototype.ngAfterViewInit = function () {
        if (this.indexToScroll === -1) {
            return;
        }
        this.virtualization.scrollToIndex(this.indexToScroll);
        this.indexToScroll = -1;
    };
    ViewListComponent.prototype.ngAfterViewChecked = function () {
        if (this.indexToScroll === -1) {
            return;
        }
        this.virtualization[this.animateToIndex ? 'animateToIndex' : 'scrollToIndex'](this.indexToScroll);
        this.animateToIndex = true;
        this.indexToScroll = -1;
    };
    ViewListComponent.prototype.pageChange = function (_a) {
        var skip = _a.skip;
        this.dates = this.service.datesList(this.service.addToDate(this.min, skip), this.getTake(skip));
    };
    ViewListComponent.prototype.scrollChange = function (_a) {
        var offset = _a.offset;
        var translate = "translateY(" + offset + "px)";
        this.style = { transform: translate, '-ms-transform': translate };
    };
    ViewListComponent.prototype.setActiveDate = function (index) {
        this.activeDate = this.service.addToDate(this.min, index);
        this.cdr.detectChanges();
    };
    ViewListComponent.prototype.handleDateChange = function (candidate) {
        this.valueChange.emit(candidate);
    };
    ViewListComponent.prototype.isMonthView = function () {
        return this.activeView === CalendarViewEnum.month;
    };
    ViewListComponent.prototype.isScrolled = function () {
        return this.virtualization.isListScrolled(this.service.skip(this.focusedDate, this.min));
    };
    ViewListComponent.prototype.getViewHeight = function () {
        switch (this.activeView) {
            case CalendarViewEnum.month:
                return this.monthViewHeight;
            case CalendarViewEnum.year:
                return this.yearViewHeight;
            case CalendarViewEnum.decade:
            case CalendarViewEnum.century:
                return this.decadeViewHeight;
            default:
                return 1;
        }
    };
    ViewListComponent.prototype.getScrollableHeight = function () {
        return this.activeView === CalendarViewEnum.month ? this.scrollableHeight : this.scrollableYearHeight;
    };
    ViewListComponent.prototype.getTake = function (skip) {
        return Math.min(this.total - skip, this.take);
    };
    ViewListComponent.prototype.getWeekNames = function () {
        var weekNames = shiftWeekNames(this.intl.dateFormatNames({ nameType: 'short', type: 'days' }), this.intl.firstDay());
        return this.showWeekNumbers ? [''].concat(weekNames) : weekNames;
    };
    return ViewListComponent;
}());
export { ViewListComponent };
ViewListComponent.decorators = [
    { type: Component, args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'kendo-calendar-viewlist',
                template: "\n    <kendo-calendar-header\n        [currentDate]=\"activeDate\"\n        [min]=\"min\"\n        [max]=\"max\"\n        [activeView]=\"activeView\"\n        (today)=\"handleDateChange($event)\"\n    >\n    </kendo-calendar-header>\n    <table class=\"k-calendar-weekdays\" *ngIf=\"isMonthView()\">\n        <colgroup><col *ngFor=\"let _ of cols\" /></colgroup>\n        <thead>\n            <tr>\n                <th *ngFor=\"let name of weekNames\">{{name}}</th>\n            </tr>\n        </thead>\n    </table>\n    <kendo-virtualization\n        [skip]=\"skip\"\n        [take]=\"take\"\n        [total]=\"total\"\n        [itemHeight]=\"viewHeight\"\n        [topOffset]=\"viewOffset\"\n        [bottomOffset]=\"bottomOffset\"\n        [scrollOffsetHeight]=\"viewOffset\"\n        [maxScrollDifference]=\"viewHeight\"\n        (pageChange)=\"pageChange($event)\"\n        (scrollChange)=\"scrollChange($event)\"\n        (activeIndexChange)=\"setActiveDate($event)\"\n        >\n        <table [ngStyle]=\"style\">\n            <colgroup><col *ngFor=\"let _ of cols\" /></colgroup>\n\n    <tbody kendoCalendarView *ngIf=\"dates[0]\"\n           role=\"rowgroup\"\n           [activeView]=\"activeView\"\n           [isActive]=\"isActive\"\n           [min]=\"min\" [max]=\"max\"\n           [cellUID]=\"cellUID\"\n           [focusedDate]=\"focusedDate\"\n           [selectedDate]=\"value\"\n           [showWeekNumbers]=\"showWeekNumbers\"\n           [templateRef]=\"cellTemplateRef\"\n           [viewDate]=\"dates[0]\"\n           (change)=\"handleDateChange($event)\"\n    ></tbody>\n\n    <tbody kendoCalendarView *ngIf=\"dates[1]\"\n           role=\"rowgroup\"\n           [activeView]=\"activeView\"\n           [isActive]=\"isActive\"\n           [min]=\"min\" [max]=\"max\"\n           [cellUID]=\"cellUID\"\n           [focusedDate]=\"focusedDate\"\n           [selectedDate]=\"value\"\n           [showWeekNumbers]=\"showWeekNumbers\"\n           [templateRef]=\"cellTemplateRef\"\n           [viewDate]=\"dates[1]\"\n           (change)=\"handleDateChange($event)\"\n    ></tbody>\n\n    <tbody kendoCalendarView *ngIf=\"dates[2]\"\n           role=\"rowgroup\"\n           [activeView]=\"activeView\"\n           [isActive]=\"isActive\"\n           [min]=\"min\" [max]=\"max\"\n           [cellUID]=\"cellUID\"\n           [focusedDate]=\"focusedDate\"\n           [selectedDate]=\"value\"\n           [showWeekNumbers]=\"showWeekNumbers\"\n           [templateRef]=\"cellTemplateRef\"\n           [viewDate]=\"dates[2]\"\n           (change)=\"handleDateChange($event)\"\n    ></tbody>\n\n    <tbody kendoCalendarView *ngIf=\"dates[3]\"\n           role=\"rowgroup\"\n           [activeView]=\"activeView\"\n           [isActive]=\"isActive\"\n           [min]=\"min\" [max]=\"max\"\n           [cellUID]=\"cellUID\"\n           [focusedDate]=\"focusedDate\"\n           [selectedDate]=\"value\"\n           [showWeekNumbers]=\"showWeekNumbers\"\n           [templateRef]=\"cellTemplateRef\"\n           [viewDate]=\"dates[3]\"\n           (change)=\"handleDateChange($event)\"\n    ></tbody>\n\n    <tbody kendoCalendarView *ngIf=\"dates[4]\"\n           role=\"rowgroup\"\n           [activeView]=\"activeView\"\n           [isActive]=\"isActive\"\n           [min]=\"min\" [max]=\"max\"\n           [cellUID]=\"cellUID\"\n           [focusedDate]=\"focusedDate\"\n           [selectedDate]=\"value\"\n           [showWeekNumbers]=\"showWeekNumbers\"\n           [templateRef]=\"cellTemplateRef\"\n           [viewDate]=\"dates[4]\"\n           (change)=\"handleDateChange($event)\"\n    ></tbody>\n\n        </table>\n    </kendo-virtualization>\n  "
            },] },
];
/** @nocollapse */
ViewListComponent.ctorParameters = function () { return [
    { type: BusViewService, },
    { type: ChangeDetectorRef, },
    { type: IntlService, },
    { type: DOMService, },
]; };
ViewListComponent.propDecorators = {
    'cellTemplateRef': [{ type: Input },],
    'activeView': [{ type: Input },],
    'cellUID': [{ type: Input },],
    'focusedDate': [{ type: Input },],
    'isActive': [{ type: Input },],
    'min': [{ type: Input },],
    'max': [{ type: Input },],
    'showWeekNumbers': [{ type: Input },],
    'value': [{ type: Input },],
    'valueChange': [{ type: Output },],
    'virtualization': [{ type: ViewChild, args: [VirtualizationComponent,] },],
    'getComponentClass': [{ type: HostBinding, args: ["class.k-calendar-view",] },],
    'getComponentMonthClass': [{ type: HostBinding, args: ["class.k-calendar-monthview",] },],
    'getComponentYearClass': [{ type: HostBinding, args: ["class.k-calendar-yearview",] },],
    'getComponentDecadeClass': [{ type: HostBinding, args: ["class.k-calendar-decadeview",] },],
    'getComponentCenturyClass': [{ type: HostBinding, args: ["class.k-calendar-centuryview",] },],
};
